"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.visitListeners = void 0;
const ts = require("typescript");
const utils_1 = require("../utils");
function visitListeners(type, inputProperty, parsedLogic) {
    var _a;
    const getActionType = utils_1.getActionTypeCreator(parsedLogic);
    const { checker } = parsedLogic;
    let extraActions = {};
    let objectLiteral = inputProperty.initializer;
    if (ts.isFunctionLike(objectLiteral)) {
        objectLiteral = objectLiteral.body;
    }
    if (ts.isParenthesizedExpression(objectLiteral)) {
        objectLiteral = objectLiteral.expression;
    }
    if (ts.isObjectLiteralExpression(objectLiteral)) {
        extraActions = utils_1.extractImportedActions(objectLiteral, checker);
        if (extraActions) {
            Object.assign(parsedLogic.extraActions, extraActions);
        }
    }
    for (const property of type.getProperties()) {
        const name = property.getName();
        if (extraActions[name]) {
            const actionCreator = extraActions[name];
            if (actionCreator && ts.isFunctionLike(actionCreator)) {
                const actionReturnType = actionCreator.type;
                if (actionReturnType && ts.isTypeLiteralNode(actionReturnType)) {
                    const payload = (_a = actionReturnType.members.find((m) => { var _a; return ((_a = m.name) === null || _a === void 0 ? void 0 : _a.escapedText) === 'payload'; })) === null || _a === void 0 ? void 0 : _a.type;
                    if (payload) {
                        parsedLogic.listeners.push({ name, action: actionReturnType, payload });
                    }
                }
            }
        }
        else {
            const action = parsedLogic.actions.find((a) => a.name === name);
            if (action) {
                parsedLogic.listeners.push({
                    name: action.name,
                    payload: action.returnTypeNode,
                    action: ts.createTypeLiteralNode([
                        ts.createPropertySignature(undefined, ts.createIdentifier('type'), undefined, ts.createLiteralTypeNode(ts.createStringLiteral(getActionType(action.name))), undefined),
                        ts.createPropertySignature(undefined, ts.createIdentifier('payload'), undefined, action.returnTypeNode, undefined),
                    ]),
                });
            }
        }
    }
}
exports.visitListeners = visitListeners;
//# sourceMappingURL=visitListeners.js.map